buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id 'org.jetbrains.intellij' version '0.4.16'
}

sourceSets {
    main {
        java.srcDirs 'src/main/java', 'src/main/gen'
        resources.srcDirs 'src/main/resources'
    }
    test {
        java.srcDirs 'src/test/java'
        resources.srcDirs 'src/test/resources'
    }
}


group 'org.myplugin'
version "${version}"

allprojects {
//    apply plugin: 'kotlin'
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:deprecation"
    }

    tasks.withType(Test) {
        useJUnit {
            include '**/**/*Test.*' // any Java or Kotlin class that ends with 'Test'
        }

        testLogging {
            beforeSuite { suite ->
                if (!suite.parent) { // will match the outermost suite
                    logger.lifecycle ' ----------- Building Tests -----------'
                } else if (suite.className != null) {
                    logger.lifecycle "${suite.className}:"
                }
            }

            afterTest { descriptor, result ->
                switch (result.resultType) {
                    case 'SUCCESS':
                    case 'PASSED':
                        logger.lifecycle("\t✔ {}", descriptor.name)
                        break
                    case TestResult.ResultType.SKIPPED.name():
                        logger.lifecycle("\t⛔ {}", descriptor.name)
                        break
                    case TestResult.ResultType.FAILURE.name():
                        logger.lifecycle("\t✘ {}", descriptor.name)
                        break
                    default:
                        logger.lifecycle("\t? {} {}", descriptor.name, result.resultType)
                }
            }

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength) + '\n')
                }
            }
        }
    }

    // take the version number defined in gradle build and use that in plugin.xml
    task initConfig(type: Copy) {
        from('src/main/resources') {
            include '**/plugin.xml'
            filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [version: version])
        }
    }

    apply plugin: 'org.jetbrains.intellij'
    intellij {
//        pluginName 'my-plugin-jetbrains'
        version ideaVersion
//        plugins ['PsiViewer:3.28.93']
        intellij.updateSinceUntilBuild false //Disables updating since-build attribute in plugin.xml

//        publishPlugin {
//            username System.getenv('JETBRAINS_USERNAME')
//            password System.getenv('JETBRAINS_PASSWORD')
//            channels publishChannels
//        }

        ideaDependencyCachePath './distros'
        prepareSandbox {
            copy {
                from './PsiViewer.jar'
                into './build/idea-sandbox/plugins/'
            }
        }

    }

    task testCompilation(type: Test, group: 'Verification', dependsOn: [classes, testClasses]) {
        useJUnit {
//            include '/vlang/build/**/**/*'
        }
        testLogging {
            exceptionFormat = 'full'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
//    testCompile group: 'junit', name: 'junit', version: '4.12'
}

//compileKotlin {
//    kotlinOptions.jvmTarget = javaVersion
//}
//compileTestKotlin {
//    kotlinOptions.jvmTarget = javaVersion
//}
patchPluginXml {
    changeNotes """
      Add change notes here.<br>
      <em>most HTML tags may be used</em>"""
}

apply plugin: 'idea'
idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
    module {
        generatedSourceDirs += file('src/main/gen')
    }
}